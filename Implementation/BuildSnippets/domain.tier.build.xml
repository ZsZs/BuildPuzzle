<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<project name="Build Domain Tier" basedir="." default="distribute" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property environment="env" />
	<property name="component.distribution.dir" value="${distribution.base.dir}" />
	<property name="component.distribution.path" value="${distribution.base.path}" />
	<property name="component.packaged.file" value="${component.name}-${component.version}.${component.package.extension}" />
   <property name="component.packaged.source.file" value="${component.name}-${component.version}-sources.${component.package.extension}" />
   <property name="component.packaged.javadoc.file" value="${component.name}-${component.version}-javadoc.${component.package.extension}" />

	<path id="ivy.lib.path">
	    <fileset dir="${ivy.root.dir}" includes="*.jar"/>
	</path>
	
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
	
	<patternset id="source.files">
		<include name="**/*.java" />
	</patternset>

	<patternset id="source.resources">
		<include name="**/*.htm" />
		<include name="**/*.html" />
		<include name="**/*.hbm.xml" />
		<include name="**/*.txt" />
		<include name="**/*.xml" />
		<include name="**/*.xsd" />
		<include name="**/*.properties" />
		<include name="**/*.java.template" />
	</patternset>

	<path id="project.auxiliary.classpath">
		<fileset dir="${project.library.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="processpuzzle.development.classpath">
		<fileset dir="${common.dependent.library.path}/DevelopmentLibraries">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="processpuzzle.production.classpath">
		<fileset dir="${common.dependent.library.path}/ProductionLibraries">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="processpuzzle.distribution.classpath">
		<fileset dir="${common.dependent.library.path}/Distribution/ProcessPuzzle">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="ant.tasks.classpath">
		<fileset dir="${ant.tasks.path}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="cobertura.classpath">
		<fileset dir="${cobertura.root.dir}">
			<include name="cobertura*.jar" />
			<include name="lib/**/*.jar" />
		</fileset>
	</path>

	<path id="fitnesse.classpath">
		<fileset dir="${fitnesse.root.dir}">
			<include name="fitnesse.jar" />
			<include name="**/lib/*.jar" />
		</fileset>
		<fileset dir="${project.library.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="findbugs.classpath">
		<fileset dir="${findbugs.root.dir}">
			<include name="lib/findbugs-ant.jar" />
		</fileset>
	</path>

	<path id="pmd.classpath">
		<fileset dir="${pmd.root.dir}">
			<include name="lib/**/*.jar" />
		</fileset>
	</path>

	<ivy:configure file="Build/ivysettings.xml" />
	<ivy:cachepath pathid="processpuzzle.development.classpath" conf="development" />
	<ivy:cachepath pathid="processpuzzle.production.classpath" conf="production" />

	<path id="compile.production.classpath">
		<path refid="processpuzzle.production.classpath" />
		<path refid="project.auxiliary.classpath" />
	</path>

	<path id="compile.test.classpath">
		<path refid="compile.production.classpath" />
		<path refid="processpuzzle.development.classpath" />
		<pathelement location="${project.production.classes.dir}" />
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	<taskdef name="findbugs" classpathref="findbugs.classpath" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" />
	<taskdef name="pmd" classpathref="pmd.classpath" classname="net.sourceforge.pmd.ant.PMDTask" />
	<taskdef classpath="${ant.tasks.path}/ant-contrib-1.0b3.jar" resource="net/sf/antcontrib/antlib.xml" />


	<!-- Domain Tier Build -->
	<import file="init.build.xml" />
	<import file="resolve.libraries.build.xml" />
	<import file="compile.build.xml" />
	<import file="component.packaging.build.xml" />
	<import file="component.sign.build.xml" />
	<import file="component.test.build.xml" />
	<import file="analyse.build.xml" />
   <import file="component.document.build.xml" />
	<import file="component.distribution.build.xml" />

	<target name="all" depends="distribute" />

	<target name="init" depends="component.initializing.init" description="Initializes build environment." />
	<target name="resolve" depends="init, component.resolve.resolve" description="Fetches dependent libraries." />
	<target name="compile" depends="resolve, component.compiling.compile" description="Compiles sources." />
	<target name="java.archive" depends="compile, component.packaging.package" description="Package component." />
	<target name="test" depends="java.archive, component.testing.test" description="Test component." />
	<target name="java.sign" depends="test, component.sign.sign" description="Sign component." />
	<target name="analyse" depends="java.sign, component.analysis.analyse" description="Analyse component." />
   <target name="document" depends="analyse, component.document.document" description="Document the component." />
	<target name="distribute" depends="document, component.distribution.distribute" description="Distribute packaged component." />

   <target name="distribute-only" description="Bypasses the compillation, test targets and distribute packaged component." />
	
	<target name="nooperation">
		<echo>domain.tier.build</echo>
	</target>

</project>
